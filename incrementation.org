* Incrémenter une variable à plusieurs threads

  Dans cette section nous montrons que faire l'incrémentation de manière
  simpliste ne marche pas dans la plupart des cas.

  Deux solutions sont montrés ici:
  1. protéger la section critique par un accès exclusif (mutex)
  2. utiliser des opérations atomiques

  Les temps d'exécutions sont comparés.

  Le code C et C++ utilise une variable stride, qui sert à empêcher
  le compilateur d'optimiser le code, sinon, il va générer un code qui
  va directement faire la somme des incrémentations.

** le problème en C (Posix Thread)
   Le code compare les résultats et temps d'exécution de
   l'incrémentation simple, celle avec un mutex puis celle avec les
   opérations atomiques. (2000 incrémentations pour mon
   core-i7. Cela marche aussi avec 1000 mais pas de façon systématique)

#+INCLUDE: CodeIncrementation/incPthread.c src C

#+BEGIN_SRC sh :exports code
gcc -Wall -o bin/incPthread -std=gnu11 -O3 CodeIncrementation/incPthread.c -lpthread
bin/incPthread
#+END_SRC


produit l'affichage suivant
: compteur: 4923 en 0.000381028
: compteur avec lock: 8000 en 0.00358699
: compteur atomic: 8000 en 0.00094466


** Le problème en C++
   Le code compare les résultats et temps d'exécution de
   l'incrémentation simple, celle avec un mutex puis celle avec les
   opérations atomiques.

   Cela ne marche pas dès que le temps d'exécution des threads est
   plus long que le temps de création. (2000 incrémentations pour mon
   core-i7)

#+INCLUDE: CodeIncrementation/incCpp.cpp src C++

#+BEGIN_SRC sh :exports code
g++ -Wall -o bin/incCpp -std=gnu++11 -O3 CodeIncrementation/incCpp.cpp -lpthread
bin/incCpp
#+END_SRC

produit l'affichage suivant (systématique)
: compteur: 7322 en 375 µs
: compteur avec lock: 8000 en 1810 µs
: compteur atomic: 8000 en 357 µs

* La section critique
